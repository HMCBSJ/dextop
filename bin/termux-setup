#!/bin/bash

# author #

# Nathanel Titane - nathanel.titane@gmail.com

# Termux // Dextop // Ubuntu #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

version="10-10-2020"

# usage #

while (($#))
do
	case "${1}" in
		-f|--full)
			install_option="full"
			;;
		-m|--minimal)
			install_option="minimal"
			;;
		-h|--help)
			echo -e ""
			echo -e "USAGE:"
			echo -e ""
			echo -e "-f, --full \t Full setup: download and install full desktop environment and utilities."
			echo -e "-m, --minimal \t Minimal setup: download and install minimal desktop environment and utilities."
			echo -e ""
			echo -e "-a, --applications: Download a set of optimized and precompiled arm64 applications."
			echo -e ""
			echo -e "-h, --help \t Show help and usage."
			echo -e "-v, --version \t Show ${script} version."
			echo -e ""
			exit
			;;
		-v|--version)
			echo -e ""
			echo -e "${script} [ Version ${version} ]"
			echo -e ""
			exit
			;;
		*)
			echo -e ""
			echo "Usage: ${0} <install option>"
			echo -e ""
			echo -e "${script}: Unknown option ${1}"
			echo -e "Type './${script} --help' for help and usage information."
			echo -e ""
			exit 1
			;;
		esac
	shift
done

install_option="${1}"

# set defaults

[ -z "${install_option}" ] && install_option="minimal"

# set globals

SETUP_DIRECTORY="${PREFIX%/*}"
BINARIES_DIRECTORY="${PREFIX}"/bin

# initial prompt clear #

clear

# dependencies #

# source

# explicit console.get for preload

curl -sL dep.dxtp.app/console > "${BINARIES_DIRECTORY}"/console && source "${BINARIES_DIRECTORY}"/console
curl -sL dep.dxtp.app/globals > "${BINARIES_DIRECTORY}"/globals && source "${BINARIES_DIRECTORY}"/globals

# download

console.fwd "Initializing..."
echo

console.get bin.dxtp.app termux-download "${BINARIES_DIRECTORY}"

console.wait 1

# clear #

clear

bash "${BINARIES_DIRECTORY}"/termux-download

# clear #

clear

# welcome #

console.msg "[ Linux on Android -  Termux // Dextop // Ubuntu [ Version ${version} ] ]"
echo

console.wait 1

console.fwd "Initializing setup [ termux ]..."
echo

console.wait 2

# setup #

# setup termux package requirements

"${BINARIES_DIRECTORY}"/termux-packages

# setup environments

console.fwd "Setting up environments [ [ termux <<< ] | [ >>> proot ] ]..."
echo

# setup termux environment files

"${BINARIES_DIRECTORY}"/termux-environment

# setup transient storage - [ device <<>> [ termux <<>> [ proot ] ] ]

"${BINARIES_DIRECTORY}"/termux-storage

# setup termux login messages

"${BINARIES_DIRECTORY}"/termux-welcome

# verify architecture compatibility

"${BINARIES_DIRECTORY}"/proot-architecture

# setup proot user information

"${BINARIES_DIRECTORY}"/proot-information

# setup proot image

"${BINARIES_DIRECTORY}"/proot-image

# setup proot group IDs

"${BINARIES_DIRECTORY}"/proot-groups

# setup proot libraries preload for enhanced performance

"${BINARIES_DIRECTORY}"/proot-libraries

# setup proot network requirements  - [ device <<>> [ termux <<>> [ proot ] ] ]

"${BINARIES_DIRECTORY}"/proot-network

# setup proot install routin

"${BINARIES_DIRECTORY}"/proot-setup

# export #

cat <<- FILE >> "${BINARIES_DIRECTORY}"/globals

# version #

export version=${version}

# options #

export install_option=""${install_option}""
FILE

# cleanup #

# remove scripts

rm "${HOME}"/"${script}" || :

# automatic setup transition [ termux >>> [ proot ] ]

cat <<- 'FILE' >> "${PROOT_DIRECTORY}"/root/.profile

bash "${HOME}"/proot-setup
FILE

# run 'proot-launch' as 'root'
# and carry over setup in proot environment

console.inf "Entering proot environment."
echo

console.wait 1

bash "${BINARIES_DIRECTORY}"/proot-launch

clear

exit