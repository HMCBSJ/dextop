#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# usage #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

distribution_name="ubuntu"
distribution_version="20.04.1"
proot_launcher="proot-launch"

iso_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${distribution_version}/release"
iso_archive="ubuntu-base-${distribution_version}-base-${iso_architecture}.tar.gz"
iso_full_url="${iso_root_url}/${iso_archive}"

# set defaults

[ -z "${distribution_version}" ] && distribution_version="20.04.1"

# initial prompt clear #

clear

proot_unpack () {
	# shorthand
	
	# proot -l tar -xzf "${1}" -X "${2}" || :
	
	# exclude archive directories: dev | proc | sys | system
	# 'proot-launch' will bind and mount those device directories to proot
	
	proot									\
		--link2symlink						\
			tar 							\
				--extract					\
				--file="${1}"				\
					--exclude='dev'			\
					--exclude='proc'		\
					--exclude='sys'			\
					--exclude='system'		|| :
}

proot_deploy () {
	console.inf "Initializing proot setup."
	echo

	console.fwd "Initializing..."
	echo
	
	console.wait 1
	echo

	console.inf "Downloading image [ ${distribution_name^} ${distribution_version} ]."
	echo
	
	echo

	console.get "${iso_url}" "${iso_archive}" "${SETUP_DIRECTORY}" &

	console.progress "Downloading..."
	echo

	console.inf "Creating proot directory."
	echo

	mkdir -p "${PROOT_DIRECTORY}"

	console.inf "Creating bind directory."
	echo

	mkdir -p "${BIND_DIRECTORY}"

	console.inf "Extracting image contents."
	echo

	cd "${PROOT_DIRECTORY}" || exit 1

	proot_unpack "${SETUP_DIRECTORY}/${iso_archive}" || exit 1 &

	console.progress "Unpacking..."
	echo

	wait
	
	# clean #
	
	# remove archive after unpacking

	rm -rf "${SETUP_DIRECTORY}/${iso_archive}"
}

# remove previous deployments

[ -d "${PROOT_DIRECTORY}" ] && rm -rf "${PROOT_DIRECTORY}" || :

# run setup

proot_deploy