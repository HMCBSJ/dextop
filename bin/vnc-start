#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# /etc/os-release: source distribution codename variables (e.g. $NAME)

source /etc/os-release

# usage #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

# initial prompt clear #

clear

PORT="590${DISPLAY:1}"

vnc () {
	console.silence "
					vncserver									\
							-SecurityTypes none					\
							-localhost yes						\
							-depth 32							\
							-cleanstale							\
							-name $NAME							\
							-geometry ${GEOMETRY} ${DISPLAY}"

					# 'vncserver' uses $DISPLAY instead of $PORT

	console.fwd "Starting display server..."
	echo

	console.inf "Format.......: ${format}"
	console.inf "Resolution...: ${GEOMETRY}"
	console.inf "Port.........: ${PORT}"
	echo

	# make selection available for automatic start
	
	# verify user id - do not write to root

	if [[ $(id -u) -ne 0 ]]
	then
		# integer check: do not write non numerical values to file
		
		if [[ "${selection}" =~ ^[0-9]+$ ]]
		then
				echo "${selection}" > /home/$(id -u -n)/.vnc/selection
		fi
	fi

	# start android vnc intent
	# and force-stop existing outputs
	# before intent launch
	
	# am start								\
	#		-d vnc://${LOCALHOST}:${PORT}	\
	#		-S application/activity"
	
	console.silence "am start -d vnc://${LOCALHOST}:${PORT} -S ${VNC}"
}

print_resolutions() {
	console.ipt "Enter the selection to start the display server with: "
	echo
	
	# list supported display resolutions
	
	resolutions=(
		VGA       640     480
		WVGA      768     480
		SVGA      800     600
		FWVGA     854     480
		qHD       960     540
		DVGA      960     640
		WSVGA     1024    576
		WSVGA     1024    600
		XGA       1024    768
		XGA+      1152    864
		HD        1280    720
		WXGA      1366    768
		WXGA+     1440    900
		HD+       1600    900
		SXGA      1280    1024
		SXGA+     1400    1050
		UXGA      1600    1200
		WSXGA+    1680    1050
		FHD       1920    1080
		WUXGA     1920    1200
		DCI2K     2048    1080
		QWXGA     2048    1152
		QXGA      2048    1536
		UWFHD     2560    1080
		QHD       2560    1440
		WQXGA     2560    1600
		QSXGA     2560    2048
		GTS7+     2800    1752
		QHD+      3200    1800
		WQSXGA    3200    2048
		QUXGA     3200    2400
		UWQHD     3440    1440
		UW4K      3840    1600
		4KUHD     3840    2160
		WQUXGA    3840    2400
		DCI4K     4096    2160
		UW5K      5120    2160
		5K        5120    2880
		8KUHD     7680    4320
	)
	
	# prepend list with default / custom entries
	
	printf '\n'
	printf '\t[  1 ] Default\n'
	printf '\t[  2 ] Custom\n'
	printf '\n'
	
	# set padding for uniform output
	
	pad_length=10
	
	# continue list using array selection of suppported values
	
	for (( i=0 ; i<${#resolutions[@]} ; i+=3 ))
	do
		format="${resolutions[$i]}"
		width="${resolutions[$i+1]}"
		height="${resolutions[$i+2]}"
		resolution="${width}x${height}"

		number=$((($i/3) + 1))

		if (( $i/3 >= 0 && $i/3 <= 8 ))
		then
				printf '\t[  %s ] %s' ${number} ${format}
		else
				printf '\t[ %s ] %s' ${number} ${format}
		fi

		printf '%*s' $((pad_length - ${#format}))
		printf '%s\n' ${resolution}
	done
	
	printf '\n'
}

# show selection

print_resolutions

# values #

values_list=(
	selection
)

# manage user input for values_list

console_rtn=()

console.input ${values_list[@]}

eval ${console_rtn[@]}

# check selection against selection range

while true
do
	if [[ "${selection}" -lt 1 ]] || [[ "${selection}" -gt "${number}" ]]
	then
		echo
		console.err "Invalid selection:"
		console.wrn "Select a format ranging from [ 1 - ${number} ]."
		echo
	
		console.ipt "Selection: "
		read selection
		echo
	else
		break
	fi
done

# manage selection

case "${selection}" in
	c|C)
		format="Custom"
	
		console.inf "Setting custom resolution and port:"
		echo
	
		console.ipt "Enter WIDTH and HEIGHT (e.g. 1920 1080): "
		read width height
		echo
	
		console.ipt "Enter port NUMBER (e.g. 1): "
		read custom_port
		echo
	
		format="Custom"
		custom_resolution="${width}x${height}"
	
		DISPLAY=":${custom_port}"
		GEOMETRY="${custom_resolution}"
		PORT="590${DISPLAY:1}"
	
		vnc
	;;
	*)
		resolution=""
		
		if [[ "${selection}" =~ ^[0-9]+$ ]]
		then
			i=$((${selection}-1))
			i=$(($i*3))

			format="${resolutions[$i-3]}"
			width="${resolutions[$i-2]}"
			height="${resolutions[$i-1]}"
			resolution="${width}x${height}"
		fi
	
		GEOMETRY="${resolution}"
	
		vnc
		;;
esac